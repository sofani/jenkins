node ('master') {
    stage('import') {
        try {
            git url:'https://github.com/sofani/jenkins.git'
        } catch(error) {
          //slackSend message :(env.BUILD_NUMBER) color: 'Danger'
          throw error;
        }
    }
    stage('build') {
         try {
             dir('JenkinsMvc') {
               bat 'dotnet restore'
               bat 'msbuild /t:clean, build JenkinsMvc.csproj'
             }

        } catch (error) {
             //slackSend message: color: 'Danger'
              throw error;
        }
    }
    stage('analyze') {
         try {
              dir('JenkinsMvc') {
                 bat 'C:\\Tools\\SonarQube\\SonarQube.Scanner.MSBuild.exe begin /k:jkmvc'
                 bat 'msbuild /t:build JenkinsMVC.csproj'
                 bat 'C:\\Tools\\SonarQube\\SonarQube.Scanner.MSBuild.exe end'
              }
        } catch(error) {
             //slackSend message: color: 'Danger'
              throw error;
        }
    }
    stage('test') {
         try {
            dir('JenkinsMvc.Test') {
                bat 'dotnet restore'
                bat 'msbuild /t:build JenkinsMvc.Test.csproj'
                bat 'dotnet test'
            }
        } catch (error) {
             //slackSend message: color: 'Danger'
              throw error;
        }
    }
    //conatina all the libraries as part of packages
    //msbuild is going to build from client side
    stage('package') {
         try {
            dir ('JenkinsMvc') {
               // bat 'msbuild /t:pack JenkinsMvc.csproj --out ../Package'
                bat 'dotnet pack JenkinsMvc.csproj --out ../Package'
            }
        } catch (error){
             //slackSend message: color: 'Danger'
              throw error;
        }
    }
    stage('deploy') {
         try {
             dir(Jenkins)
           bat 'msdeploy --verb:sync --sourcepath: --destpath:'
        } catch (error) {
             //slackSend message: color: 'Danger'
              throw error;
        }
    }
}